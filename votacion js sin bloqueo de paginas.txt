import { initializeApp } from "https://www.gstatic.com/firebasejs/11.4.0/firebase-app.js";
import { getFirestore, doc, updateDoc, increment, onSnapshot, getDocs, collection, getDoc } from "https://www.gstatic.com/firebasejs/11.4.0/firebase-firestore.js";

const firebaseConfig = {
    apiKey: "AIzaSyAavOPGteAaKSdeARDKKH1wDqksQExCczI",
    authDomain: "prueba-premios-fpi.firebaseapp.com",
    projectId: "prueba-premios-fpi",
    storageBucket: "prueba-premios-fpi.firebasestorage.app",
    messagingSenderId: "315210231985",
    appId: "1:315210231985:web:65554b20824a46cd18b290",
};

const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

// ðŸ”¹ Detectar la categorÃ­a actual
const categoriaActual = document.body.getAttribute("data-categoria");

// ðŸ”¹ FunciÃ³n para votar y bloquear los otros botones en la categorÃ­a actual
async function vote(instructorId) {
    const docRef = doc(db, "votos", instructorId);

    try {
        await updateDoc(docRef, { votos: increment(1) });

        // Guardar en localStorage que el usuario ha votado en esta categorÃ­a
        localStorage.setItem(`yaVoto_${categoriaActual}`, "true");

        // Bloquear todos los botones de la categorÃ­a despuÃ©s del voto
        document.querySelectorAll(".vote-btn").forEach(button => {
            button.disabled = true;
            button.style.backgroundColor = "gray";
            button.style.cursor = "not-allowed";
        });

        alert("Â¡Voto registrado con Ã©xito! âœ…");
    } catch (error) {
        console.error("Error al votar:", error);
        alert("Hubo un error al votar. Intenta de nuevo.");
    }
}

// ðŸ”¹ FunciÃ³n para bloquear botones si el usuario ya votÃ³ en esta categorÃ­a
function verificarVoto() {
    if (localStorage.getItem(`yaVoto_${categoriaActual}`) === "true") {
        document.querySelectorAll(".vote-btn").forEach(button => {
            button.disabled = true;
            button.style.backgroundColor = "gray";
            button.style.cursor = "not-allowed";
        });
    }
}

// ðŸ”¹ Escuchar cambios en Firebase en tiempo real
async function escucharVotos() {
    const instructores = {
        "categoria1": ["Sandra-Grajales", "Liliana-Mejia", "Martha-Mesa", "Mariana-Restrepo"],
        "categoria2": ["Luz-Marina-Gonzalez", "Juan-Guillermo-Mosquera", "Marta-Islena-Rengifo", "Mauricio-Torres"],
        "categoria3": ["OtroInstructor1", "OtroInstructor2", "OtroInstructor3"]
    }[categoriaActual] || [];

    const snapshot = await getDocs(collection(db, "votos"));
    let totalVotos = 0;

    snapshot.forEach(doc => {
        totalVotos += doc.data().votos;
    });

    instructores.forEach(instructor => {
        const docRef = doc(db, "votos", instructor);

        onSnapshot(docRef, (docSnap) => {
            if (docSnap.exists()) {
                const votos = docSnap.data().votos;
                document.getElementById(`votes-${instructor}`).textContent = `Votos: ${votos}`;

                // Calcular porcentaje y actualizar la barra de progreso
                const porcentaje = totalVotos > 0 ? (votos / totalVotos) * 100 : 0;
                document.getElementById(`progress-${instructor}`).style.width = `${porcentaje}%`;
            }
        });
    });
}

// ðŸ”¹ Bloquear votos si ya votÃ³ en esta categorÃ­a
document.addEventListener("DOMContentLoaded", () => {
    verificarVoto();

    document.querySelectorAll(".vote-btn").forEach(button => {
        button.addEventListener("click", () => {
            const instructorId = button.getAttribute("data-instructor");
            vote(instructorId);
        });
    });

    escucharVotos();
});

// ðŸ”¹ FunciÃ³n para actualizar el ganador
async function actualizarGanador() {
    const instructores = {
        "categoria1": ["Sandra-Grajales", "Liliana-Mejia", "Martha-Mesa", "Mariana-Restrepo"],
        "categoria2": ["Luz-Marina-Gonzalez", "Juan-Guillermo-Mosquera", "Marta-Islena-Rengifo", "Mauricio-Torres"],
        "categoria3": ["OtroInstructor1", "OtroInstructor2", "OtroInstructor3"]
    }[categoriaActual] || [];

    let maxVotos = 0;
    let ganadorActual = "AÃºn en proceso...";

    const promesas = instructores.map(async (instructor) => {
        const docRef = doc(db, "votos", instructor);
        const docSnap = await getDoc(docRef);
        if (docSnap.exists()) {
            const votos = docSnap.data().votos || 0;
            if (votos > maxVotos) {
                maxVotos = votos;
                ganadorActual = instructor.replace("-", " ");
            }
        }
    });

    await Promise.all(promesas);
    document.getElementById("ganador").textContent = ganadorActual;
}

// ðŸ”¹ Temporizador de votaciÃ³n
let timeLeft = 60;
document.addEventListener("DOMContentLoaded", () => {
    const timerElement = document.getElementById("timer");

    const countdown = setInterval(() => {
        timeLeft--;
        timerElement.textContent = `Tiempo restante: ${timeLeft}s`;

        if (timeLeft <= 0) {
            clearInterval(countdown);
            timerElement.textContent = "El tiempo de votaciÃ³n ha terminado";
            document.querySelectorAll(".vote-btn").forEach(btn => btn.disabled = true);
            actualizarGanador();
        }
    }, 1000);
});

// ðŸ”¹ ðŸ”¥ NUEVA FUNCIONALIDAD: Bloqueo de categorÃ­as anteriores y actual
function marcarCategoriaVotada(categoria) {
    localStorage.setItem(`yaVoto_${categoria}`, "true");
}

function bloquearCategoriaSiYaVoto(categoria) {
    if (localStorage.getItem(`yaVoto_${categoria}`) === "true") {
        document.querySelectorAll(".vote-btn").forEach(button => {
            button.disabled = true;
            button.style.backgroundColor = "gray";
            button.style.cursor = "not-allowed";
        });
    }
}

function bloquearCategoriasAnteriores() {
    ["categoria1", "categoria2", "categoria3"].forEach(categoria => {
        if (localStorage.getItem(`yaVoto_${categoria}`) === "true") {
            if (document.body.getAttribute("data-categoria") !== categoria) {
                document.querySelectorAll(".vote-btn").forEach(button => {
                    button.disabled = true;
                    button.style.backgroundColor = "gray";
                    button.style.cursor = "not-allowed";
                });
            }
        }
    });
}

// ðŸ”¹ Modificar la funciÃ³n de votar para marcar la categorÃ­a como votada
async function vote(instructorId) {
    const docRef = doc(db, "votos", instructorId);

    try {
        await updateDoc(docRef, { votos: increment(1) });

        marcarCategoriaVotada(categoriaActual);

        document.querySelectorAll(".vote-btn").forEach(button => {
            button.disabled = true;
            button.style.backgroundColor = "gray";
            button.style.cursor = "not-allowed";
        });

        alert("Â¡Voto registrado con Ã©xito! âœ…");
    } catch (error) {
        console.error("Error al votar:", error);
        alert("Hubo un error al votar. Intenta de nuevo.");
    }
}

// ðŸ”¹ Ejecutar bloqueos en carga de pÃ¡gina
document.addEventListener("DOMContentLoaded", () => {
    bloquearCategoriaSiYaVoto(categoriaActual);
    bloquearCategoriasAnteriores();
});